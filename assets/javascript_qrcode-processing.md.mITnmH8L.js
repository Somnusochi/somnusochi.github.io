import{_ as n,c as a,am as l,o as p}from"./chunks/framework.m8Ul0eMb.js";const b=JSON.parse('{"title":"QR Code 处理实践指南","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/qrcode-processing.md","filePath":"javascript/qrcode-processing.md"}'),e={name:"javascript/qrcode-processing.md"};function o(r,s,t,c,F,i){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="qr-code-处理实践指南" tabindex="-1">QR Code 处理实践指南 <a class="header-anchor" href="#qr-code-处理实践指南" aria-label="Permalink to &quot;QR Code 处理实践指南&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>在日常业务中，我们经常遇到需要处理大量员工微信名片的场景。由于微信生成的二维码样式不统一，需要一个工具来统一处理这些二维码图片，使其具有一致的格式与样式。本文将介绍如何在浏览器环境中处理二维码图片，包括二维码的读取、生成和图片裁剪等功能。</p><h2 id="业务背景" tabindex="-1">业务背景 <a class="header-anchor" href="#业务背景" aria-label="Permalink to &quot;业务背景&quot;">​</a></h2><ol><li><p>问题描述：</p><ul><li>微信二维码名片样式不统一</li><li>图片大小不一致</li><li>包含多余的背景和装饰元素</li></ul></li><li><p>解决方案：</p><ul><li>提取原始二维码中的 URL 信息</li><li>使用统一配置重新生成二维码</li><li>确保输出图片具有一致的尺寸和样式</li></ul></li></ol><h2 id="依赖安装" tabindex="-1">依赖安装 <a class="header-anchor" href="#依赖安装" aria-label="Permalink to &quot;依赖安装&quot;">​</a></h2><div class="custom-code-block"><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#A6E22E;">pnpm</span><span style="color:#E6DB74;"> add</span><span style="color:#E6DB74;"> jsqr</span><span style="color:#E6DB74;"> qrcode</span><span style="color:#E6DB74;"> callforth</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></div><h2 id="主要功能" tabindex="-1">主要功能 <a class="header-anchor" href="#主要功能" aria-label="Permalink to &quot;主要功能&quot;">​</a></h2><ol><li>图片转 Base64</li><li>二维码识别</li><li>二维码生成</li><li>图片裁剪</li></ol><h2 id="核心代码实现" tabindex="-1">核心代码实现 <a class="header-anchor" href="#核心代码实现" aria-label="Permalink to &quot;核心代码实现&quot;">​</a></h2><h3 id="文件流转-base64" tabindex="-1">文件流转 Base64 <a class="header-anchor" href="#文件流转-base64" aria-label="Permalink to &quot;文件流转 Base64&quot;">​</a></h3><div class="custom-code-block"><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> filetoBase64</span><span style="color:#F92672;"> =</span><span style="color:#F92672;"> async</span><span style="color:#FD971F;font-style:italic;"> file</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  let</span><span style="color:#F8F8F2;"> fileReader </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> FileReader</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  fileReader.</span><span style="color:#A6E22E;">readAsDataURL</span><span style="color:#F8F8F2;">(file);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  const</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#A6E22E;"> eventOn</span><span style="color:#F8F8F2;">(fileReader, </span><span style="color:#E6DB74;">&quot;load&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">  return</span><span style="color:#F8F8F2;"> result.target.result;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></div><h3 id="二维码转换处理" tabindex="-1">二维码转换处理 <a class="header-anchor" href="#二维码转换处理" aria-label="Permalink to &quot;二维码转换处理&quot;">​</a></h3><div class="custom-code-block"><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> qrcodeTransfer</span><span style="color:#F92672;"> =</span><span style="color:#F92672;"> async</span><span style="color:#F8F8F2;"> ({ </span><span style="color:#FD971F;font-style:italic;">imgSrc</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">retries</span><span style="color:#F8F8F2;"> }) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  let</span><span style="color:#F8F8F2;"> image </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Image</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  image.src </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> imgSrc;</span></span>
<span class="line"><span style="color:#F92672;">  await</span><span style="color:#A6E22E;"> eventOn</span><span style="color:#F8F8F2;">(image, </span><span style="color:#E6DB74;">&quot;load&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  const</span><span style="color:#F8F8F2;"> scalingRatio </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0.8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0.5</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  const</span><span style="color:#F8F8F2;"> widthScaled </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> scalingRatio[</span><span style="color:#AE81FF;">3</span><span style="color:#F92672;"> -</span><span style="color:#F8F8F2;"> retries] </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> image.width;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  const</span><span style="color:#F8F8F2;"> heightScaled </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> scalingRatio[</span><span style="color:#AE81FF;">3</span><span style="color:#F92672;"> -</span><span style="color:#F8F8F2;"> retries] </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> image.height;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  let</span><span style="color:#F8F8F2;"> canvas </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">createElement</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;canvas&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  const</span><span style="color:#F8F8F2;"> ctx </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> canvas.</span><span style="color:#A6E22E;">getContext</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;2d&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  canvas.width </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> widthScaled;</span></span>
<span class="line"><span style="color:#F8F8F2;">  canvas.height </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> heightScaled;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#F8F8F2;">  ctx.</span><span style="color:#A6E22E;">drawImage</span><span style="color:#F8F8F2;">(image, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, widthScaled, heightScaled);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  let</span><span style="color:#F8F8F2;"> imageData </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ctx.</span><span style="color:#A6E22E;">getImageData</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, widthScaled, heightScaled);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  const</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#A6E22E;"> jsQR</span><span style="color:#F8F8F2;">(imageData.data, imageData.width, imageData.height, {</span></span>
<span class="line"><span style="color:#F8F8F2;">    inversionAttempts: </span><span style="color:#E6DB74;">&quot;dontInvert&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#F92672;">  return</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> qrcode.</span><span style="color:#A6E22E;">toDataURL</span><span style="color:#F8F8F2;">(result.data, {margin: </span><span style="color:#AE81FF;">1.5</span><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></div><h3 id="重试机制" tabindex="-1">重试机制 <a class="header-anchor" href="#重试机制" aria-label="Permalink to &quot;重试机制&quot;">​</a></h3><div class="custom-code-block"><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> retry</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">params</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">retries</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> 3</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> null</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">retries) {</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#66D9EF;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">reject</span><span style="color:#F8F8F2;">(err);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F92672;">  return</span><span style="color:#A6E22E;"> fn</span><span style="color:#F8F8F2;">({ </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">params, retries }).</span><span style="color:#A6E22E;">catch</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#A6E22E;"> retry</span><span style="color:#F8F8F2;">(fn, params, (retries </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">), err);</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></div><h4 id="为什么需要重试机制" tabindex="-1">为什么需要重试机制？ <a class="header-anchor" href="#为什么需要重试机制" aria-label="Permalink to &quot;为什么需要重试机制？&quot;">​</a></h4><p>在实际业务中，二维码识别会因为多种原因导致失败：</p><ol><li><p>图片质量问题</p><ul><li>微信压缩导致的图片模糊</li><li>截图时的尺寸变形</li><li>二维码周围的干扰元素</li></ul></li><li><p>设备兼容性</p><ul><li>不同设备的截图分辨率不同</li><li>系统级图片处理的差异</li></ul></li><li><p>网络问题</p><ul><li>图片加载不完整</li><li>网络延迟导致的加载超时</li></ul></li></ol><h4 id="重试策略说明" tabindex="-1">重试策略说明 <a class="header-anchor" href="#重试策略说明" aria-label="Permalink to &quot;重试策略说明&quot;">​</a></h4><ol><li><p>缩放比例优化</p><ul><li>首次尝试使用原始尺寸（1.0）</li><li>第二次尝试使用0.8倍缩放</li><li>最后尝试使用0.5倍缩放</li><li>这种递减策略能有效处理不同清晰度的图片</li></ul></li><li><p>错误处理</p><ul><li>每次失败后自动降级尝试</li><li>最多重试3次，避免无限循环</li><li>保留上一次的错误信息，便于调试</li></ul></li><li><p>性能考虑</p><ul><li>使用Promise链式调用，避免回调地狱</li><li>通过参数传递重试次数，保持函数纯净</li><li>失败后立即进入下一次尝试，提高响应速度</li></ul></li></ol><h2 id="完整流程说明" tabindex="-1">完整流程说明 <a class="header-anchor" href="#完整流程说明" aria-label="Permalink to &quot;完整流程说明&quot;">​</a></h2><ol><li>接收文件输入</li><li>将文件转换为 Base64</li><li>通过缩放比例尝试识别二维码</li><li>重新生成二维码</li><li>转换为文件流返回</li></ol><h2 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h2><div class="custom-code-block"><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 裁剪二维码图片</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> handleQRCodeImage</span><span style="color:#F92672;"> =</span><span style="color:#F92672;"> async</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">file</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">  try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    const</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#A6E22E;"> clipQrCode</span><span style="color:#F8F8F2;">(file);</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;处理成功:&#39;</span><span style="color:#F8F8F2;">, result);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;"> (error) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;处理失败:&#39;</span><span style="color:#F8F8F2;">, error);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></div><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ol><li>图片识别可能会失败，所以实现了重试机制</li><li>使用不同的缩放比例提高识别成功率</li><li>输入输出都是 File 对象，便于与表单集成</li><li>全过程异步处理，需要使用 async/await 或 Promise</li></ol><h2 id="完整代码" tabindex="-1">完整代码 <a class="header-anchor" href="#完整代码" aria-label="Permalink to &quot;完整代码&quot;">​</a></h2><div class="custom-code-block"><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> jsQR </span><span style="color:#F92672;">from</span><span style="color:#E6DB74;"> &quot;jsqr&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> qrcode </span><span style="color:#F92672;">from</span><span style="color:#E6DB74;"> &#39;qrcode&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> { eventOn } </span><span style="color:#F92672;">from</span><span style="color:#E6DB74;"> &quot;callforth&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 裁剪ios微信二维码分享图片</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> clipQrCode</span><span style="color:#F92672;"> =</span><span style="color:#F92672;"> async</span><span style="color:#FD971F;font-style:italic;"> file</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">  try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    const</span><span style="color:#F8F8F2;"> imgSrc </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#A6E22E;"> filetoBase64</span><span style="color:#F8F8F2;">(file);</span></span>
<span class="line"><span style="color:#88846F;">    // 因为有存在不同图片读取不了的情况，尝试3次</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    const</span><span style="color:#F8F8F2;"> dataurl </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#A6E22E;"> retry</span><span style="color:#F8F8F2;">(qrcodeTransfer, { imgSrc });</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#A6E22E;"> dataURLtoFile</span><span style="color:#F8F8F2;">(dataurl, file.name);</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;"> (e) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#A6E22E;">error</span><span style="color:#F8F8F2;">(e);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 将文件流转成base64</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> filetoBase64</span><span style="color:#F92672;"> =</span><span style="color:#F92672;"> async</span><span style="color:#FD971F;font-style:italic;"> file</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  let</span><span style="color:#F8F8F2;"> fileReader </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> FileReader</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  fileReader.</span><span style="color:#A6E22E;">readAsDataURL</span><span style="color:#F8F8F2;">(file);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  const</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#A6E22E;"> eventOn</span><span style="color:#F8F8F2;">(fileReader, </span><span style="color:#E6DB74;">&quot;load&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F92672;">  return</span><span style="color:#F8F8F2;"> result.target.result;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/**</span></span>
<span class="line"><span style="color:#88846F;"> * [qrcodeTransfer 二维码转义]</span></span>
<span class="line"><span style="color:#88846F;"> * </span><span style="color:#66D9EF;font-style:italic;">@param</span><span>  </span><span style="color:#A6E22E;text-decoration:underline;">{[String]}</span><span style="color:#F8F8F2;">  imgSrc</span><span style="color:#88846F;">  [图片base64]</span></span>
<span class="line"><span style="color:#88846F;"> * </span><span style="color:#66D9EF;font-style:italic;">@param</span><span>  </span><span style="color:#A6E22E;text-decoration:underline;">{[Number]}</span><span style="color:#F8F8F2;">  retries</span><span style="color:#88846F;"> [尝试次数]</span></span>
<span class="line"><span style="color:#88846F;"> * </span><span style="color:#66D9EF;font-style:italic;">@return</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">{Promise}</span><span style="color:#88846F;">         [裁剪后的图片base64]</span></span>
<span class="line"><span style="color:#88846F;"> */</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> qrcodeTransfer</span><span style="color:#F92672;"> =</span><span style="color:#F92672;"> async</span><span style="color:#F8F8F2;"> ({ </span><span style="color:#FD971F;font-style:italic;">imgSrc</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">retries</span><span style="color:#F8F8F2;"> }) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  let</span><span style="color:#F8F8F2;"> image </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Image</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  image.src </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> imgSrc;</span></span>
<span class="line"><span style="color:#F92672;">  await</span><span style="color:#A6E22E;"> eventOn</span><span style="color:#F8F8F2;">(image, </span><span style="color:#E6DB74;">&quot;load&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  const</span><span style="color:#F8F8F2;"> scalingRatio </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0.8</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0.5</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  const</span><span style="color:#F8F8F2;"> widthScaled </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> scalingRatio[</span><span style="color:#AE81FF;">3</span><span style="color:#F92672;"> -</span><span style="color:#F8F8F2;"> retries] </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> image.width;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  const</span><span style="color:#F8F8F2;"> heightScaled </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> scalingRatio[</span><span style="color:#AE81FF;">3</span><span style="color:#F92672;"> -</span><span style="color:#F8F8F2;"> retries] </span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;"> image.height;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  let</span><span style="color:#F8F8F2;"> canvas </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">createElement</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&quot;canvas&quot;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  const</span><span style="color:#F8F8F2;"> ctx </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> canvas.</span><span style="color:#A6E22E;">getContext</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;2d&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  canvas.width </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> widthScaled;</span></span>
<span class="line"><span style="color:#F8F8F2;">  canvas.height </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> heightScaled;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#F8F8F2;">  ctx.</span><span style="color:#A6E22E;">drawImage</span><span style="color:#F8F8F2;">(image, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, widthScaled, heightScaled);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  let</span><span style="color:#F8F8F2;"> imageData </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ctx.</span><span style="color:#A6E22E;">getImageData</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, widthScaled, heightScaled);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  const</span><span style="color:#F8F8F2;"> result </span><span style="color:#F92672;">=</span><span style="color:#A6E22E;"> jsQR</span><span style="color:#F8F8F2;">(imageData.data, imageData.width, imageData.height, {</span></span>
<span class="line"><span style="color:#F8F8F2;">    inversionAttempts: </span><span style="color:#E6DB74;">&quot;dontInvert&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span></span>
<span class="line"><span style="color:#F92672;">  return</span><span style="color:#F92672;"> await</span><span style="color:#F8F8F2;"> qrcode.</span><span style="color:#A6E22E;">toDataURL</span><span style="color:#F8F8F2;">(result.data, {margin: </span><span style="color:#AE81FF;">1.5</span><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 重试</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> retry</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">fn</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">params</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">retries</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> 3</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> null</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">  if</span><span style="color:#F8F8F2;"> (</span><span style="color:#F92672;">!</span><span style="color:#F8F8F2;">retries) {</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#66D9EF;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">reject</span><span style="color:#F8F8F2;">(err);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F92672;">  return</span><span style="color:#A6E22E;"> fn</span><span style="color:#F8F8F2;">({ </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">params, retries }).</span><span style="color:#A6E22E;">catch</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#A6E22E;"> retry</span><span style="color:#F8F8F2;">(fn, params, (retries </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">), err);</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 将base64转换为文件流</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> dataURLtoFile</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">dataurl</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">filename</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">  let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> dataurl.</span><span style="color:#A6E22E;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;,&#39;</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">    mime </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> arr[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">].</span><span style="color:#A6E22E;">match</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">/:(</span><span style="color:#AE81FF;">.</span><span style="color:#F92672;">*?</span><span style="color:#E6DB74;">);/</span><span style="color:#F8F8F2;">)[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    bstr </span><span style="color:#F92672;">=</span><span style="color:#A6E22E;"> atob</span><span style="color:#F8F8F2;">(arr[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]),</span></span>
<span class="line"><span style="color:#F8F8F2;">    n </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> bstr.length,</span></span>
<span class="line"><span style="color:#F8F8F2;">    u8arr </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Uint8Array</span><span style="color:#F8F8F2;">(n);</span></span>
<span class="line"><span style="color:#F92672;">  while</span><span style="color:#F8F8F2;"> (n</span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    u8arr[n] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> bstr.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(n);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F92672;">  return</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> File</span><span style="color:#F8F8F2;">([u8arr], filename, { type: mime });</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">export</span><span style="color:#F92672;"> default</span><span style="color:#F8F8F2;"> clipQrCode;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br></div></div></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>通过合理使用重试机制和缩放策略，我们成功实现了一个可靠的二维码处理工具。该工具不仅能处理各种不同来源的二维码图片，还能保证输出结果的一致性。这对于需要批量处理微信二维码名片的业务场景来说，是一个很好的解决方案。</p>`,31)]))}const u=n(e,[["render",o]]);export{b as __pageData,u as default};
