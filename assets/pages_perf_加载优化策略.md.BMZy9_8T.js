import{_ as a}from"./chunks/theme.Cda8gEDC.js";import{_ as o,c as e,G as n,am as t,o as c}from"./chunks/framework.m8Ul0eMb.js";const u=JSON.parse('{"title":"加载优化策略","description":"","frontmatter":{"layout":"doc","outline":"deep","title":"加载优化策略"},"headers":[],"relativePath":"pages/perf/加载优化策略.md","filePath":"pages/perf/加载优化策略.md"}'),p={name:"pages/perf/加载优化策略.md"};function r(i,s,F,d,y,h){const l=a;return c(),e("div",null,[n(l,{words:["加载优化策略"]}),s[0]||(s[0]=t(`<p>在现代网页开发中，优化资源加载方式是提升用户体验和页面性能的关键。本文将介绍几种常见的加载优化策略，包括异步加载、延迟加载、预加载技术以及动态加载方法。</p><h2 id="异步加载脚本" tabindex="-1">异步加载脚本 <a class="header-anchor" href="#异步加载脚本" aria-label="Permalink to &quot;异步加载脚本&quot;">​</a></h2><p>通过使用<code>async</code>属性，可以让脚本在下载时不阻塞页面的渲染。这种方式适用于那些不依赖 DOM 或 CSSOM 的脚本，例如分析工具或跟踪脚本。</p><div class="custom-code-block"><div class="terminal-header"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;"> &lt;</span><span style="color:#F92672;">script</span><span style="color:#A6E22E;"> src</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;async-script.js&quot;</span><span style="color:#A6E22E;"> async</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre></div></div><p><strong>注意事项</strong>：虽然<code>async</code>脚本不会阻塞页面加载，但它们会在下载完成后立即执行。这可能导致脚本在页面加载过程中运行，从而影响用户体验。因此，建议仅对非关键脚本使用 async 属性。</p><h2 id="延迟加载脚本" tabindex="-1">延迟加载脚本 <a class="header-anchor" href="#延迟加载脚本" aria-label="Permalink to &quot;延迟加载脚本&quot;">​</a></h2><p>与<code>async</code>不同，<code>defer</code>属性允许脚本在下载时不阻塞页面渲染，并且会在 HTML 完全解析后按顺序执行。这种特性使其非常适合需要操作 DOM 的脚本。</p><div class="custom-code-block"><div class="terminal-header"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">script</span><span style="color:#A6E22E;"> src</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;defer-script.js&quot;</span><span style="color:#A6E22E;"> defer</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre></div></div><p><strong>注意事项</strong>：<code>defer</code>脚本会按照其在 HTML 中的顺序执行，因此可以确保脚本之间的依赖关系得到正确处理。</p><h2 id="预加载资源" tabindex="-1">预加载资源 <a class="header-anchor" href="#预加载资源" aria-label="Permalink to &quot;预加载资源&quot;">​</a></h2><p>为了进一步提升页面加载性能，可以通过预加载技术提前获取关键资源。以下是一些常用的预加载方法：</p><h3 id="preload" tabindex="-1">Preload <a class="header-anchor" href="#preload" aria-label="Permalink to &quot;Preload&quot;">​</a></h3><p><code>&lt;link rel=&quot;preload&quot;&gt;</code>标签用于指示浏览器提前加载当前页面即将使用的资源，例如关键的 CSS 和 JavaScript 文件。<code>as</code>属性用于指定资源类型，帮助浏览器正确处理资源优先级。</p><div class="custom-code-block"><div class="terminal-header"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">link</span><span style="color:#A6E22E;"> rel</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;preload&quot;</span><span style="color:#A6E22E;"> href</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;style.css&quot;</span><span style="color:#A6E22E;"> as</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;style&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">link</span><span style="color:#A6E22E;"> rel</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;preload&quot;</span><span style="color:#A6E22E;"> href</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;script.js&quot;</span><span style="color:#A6E22E;"> as</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;script&quot;</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre></div></div><p><strong>使用场景</strong>：适用于需要在页面加载初期立即使用的资源，如关键的 CSS 和 JavaScript 文件。</p><h3 id="prefetch" tabindex="-1">Prefetch <a class="header-anchor" href="#prefetch" aria-label="Permalink to &quot;Prefetch&quot;">​</a></h3><p><code>&lt;link rel=&quot;prefetch&quot;&gt;</code>标签用于提前加载用户可能在将来访问的资源，这些资源会在后台加载，不会阻塞当前页面的加载。</p><div class="custom-code-block"><div class="terminal-header"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">link</span><span style="color:#A6E22E;"> rel</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;prefetch&quot;</span><span style="color:#A6E22E;"> href</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;next-page.html&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">link</span><span style="color:#A6E22E;"> rel</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;prefetch&quot;</span><span style="color:#A6E22E;"> href</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;image.jpg&quot;</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre></div></div><p><strong>使用场景</strong>：适用于用户可能访问的下一页或相关资源，如导航链接或图片。</p><h3 id="prerender" tabindex="-1">Prerender <a class="header-anchor" href="#prerender" aria-label="Permalink to &quot;Prerender&quot;">​</a></h3><p><code>&lt;link rel=&quot;prerender&quot;&gt;</code>标签用于提前渲染用户可能访问的页面，这些页面会在后台渲染，从而加快用户访问时的加载速度。</p><div class="custom-code-block"><div class="terminal-header"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">link</span><span style="color:#A6E22E;"> rel</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;prerender&quot;</span><span style="color:#A6E22E;"> href</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;next-page.html&quot;</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre></div></div><p><strong>使用场景</strong>：适用于用户可能访问的下一页，尤其是那些加载时间较长的页面。</p><h3 id="preconnect" tabindex="-1">Preconnect <a class="header-anchor" href="#preconnect" aria-label="Permalink to &quot;Preconnect&quot;">​</a></h3><p><code>&lt;link rel=&quot;preconnect&quot;&gt;</code>标签用于提前建立与目标服务器的连接，从而加快后续资源的加载速度。</p><div class="custom-code-block"><div class="terminal-header"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">link</span><span style="color:#A6E22E;"> rel</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;preconnect&quot;</span><span style="color:#A6E22E;"> href</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;https://example.com&quot;</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre></div></div><p><strong>使用场景</strong>：适用于需要提前建立连接的第三方资源，如 CDN 或 API 服务器。</p><h3 id="dns-预解析" tabindex="-1">DNS 预解析 <a class="header-anchor" href="#dns-预解析" aria-label="Permalink to &quot;DNS 预解析&quot;">​</a></h3><p>为了减少 DNS 解析时间，可以使用<code>&lt;link rel=&quot;dns-prefetch&quot;&gt;</code>标签。<code>&lt;link rel=&quot;dns-prefetch&quot;&gt;</code>标签用于提前解析目标服务器的域名，从而加快后续资源的加载速度。</p><div class="custom-code-block"><div class="terminal-header"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">link</span><span style="color:#A6E22E;"> rel</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;dns-prefetch&quot;</span><span style="color:#A6E22E;"> href</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;https://example.com&quot;</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre></div></div><p><strong>使用场景</strong>：适用于需要提前解析域名的第三方资源，如 CDN 或 API 服务器。</p><h2 id="动态加载" tabindex="-1">动态加载 <a class="header-anchor" href="#动态加载" aria-label="Permalink to &quot;动态加载&quot;">​</a></h2><p>在某些场景下，动态加载脚本或样式表可以进一步优化页面性能。以下是一个动态加载脚本和样式的示例：</p><h3 id="动态加载脚本" tabindex="-1">动态加载脚本 <a class="header-anchor" href="#动态加载脚本" aria-label="Permalink to &quot;动态加载脚本&quot;">​</a></h3><div class="custom-code-block"><div class="terminal-header"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#A6E22E;"> loadScript</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">src</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">  return</span><span style="color:#F92672;"> new</span><span style="color:#66D9EF;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    const</span><span style="color:#F8F8F2;"> script </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">createElement</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;script&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    script.src </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> src;</span></span>
<span class="line"><span style="color:#F8F8F2;">    script.</span><span style="color:#A6E22E;">onload</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#A6E22E;"> resolve</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    script.</span><span style="color:#A6E22E;">onerror</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#A6E22E;"> reject</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">new</span><span style="color:#A6E22E;"> Error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">\`Failed to load script </span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">src</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#F8F8F2;">    document.head.</span><span style="color:#A6E22E;">appendChild</span><span style="color:#F8F8F2;">(script);</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></div><h3 id="动态加载样式表" tabindex="-1">动态加载样式表 <a class="header-anchor" href="#动态加载样式表" aria-label="Permalink to &quot;动态加载样式表&quot;">​</a></h3><div class="custom-code-block"><div class="terminal-header"><svg xmlns="http://www.w3.org/2000/svg" width="54" height="14" viewBox="0 0 54 14"><g fill="none" fill-rule="evenodd" transform="translate(1 1)"><circle cx="6" cy="6" r="6" fill="#FF5F56" stroke="#E0443E" stroke-width=".5"></circle><circle cx="26" cy="6" r="6" fill="#FFBD2E" stroke="#DEA123" stroke-width=".5"></circle><circle cx="46" cy="6" r="6" fill="#27C93F" stroke="#1AAB29" stroke-width=".5"></circle></g></svg></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#A6E22E;"> loadStylesheet</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">src</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F92672;">  return</span><span style="color:#F92672;"> new</span><span style="color:#66D9EF;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    const</span><span style="color:#F8F8F2;"> link </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#A6E22E;">createElement</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;link&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    link.rel </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;stylesheet&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    link.href </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> src;</span></span>
<span class="line"><span style="color:#F8F8F2;">    link.</span><span style="color:#A6E22E;">onload</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#A6E22E;"> resolve</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    link.</span><span style="color:#A6E22E;">onerror</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#A6E22E;"> reject</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">new</span><span style="color:#A6E22E;"> Error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">\`Failed to load stylesheet </span><span style="color:#F92672;">\${</span><span style="color:#F8F8F2;">src</span><span style="color:#F92672;">}</span><span style="color:#E6DB74;">\`</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#F8F8F2;">    document.head.</span><span style="color:#A6E22E;">appendChild</span><span style="color:#F8F8F2;">(link);</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre></div></div><p><strong>使用场景</strong>：适用于按需加载非关键资源，例如懒加载组件或条件加载的样式。</p>`,38))])}const f=o(p,[["render",r]]);export{u as __pageData,f as default};
